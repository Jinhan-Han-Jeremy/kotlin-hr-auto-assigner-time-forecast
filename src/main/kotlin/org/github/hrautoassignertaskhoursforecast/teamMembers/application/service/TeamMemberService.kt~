package org.github.hrautoassignertaskhoursforecast.teamMembers.application.service

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.github.hrautoassignertaskhoursforecast.global.exception.ResourceNotFoundException
import org.github.hrautoassignertaskhoursforecast.teamMembers.application.TeamMemberMapper
import org.github.hrautoassignertaskhoursforecast.teamMembers.application.dto.TeamMemberRequestDTO
import org.github.hrautoassignertaskhoursforecast.teamMembers.application.dto.TeamMemberResponseDTO
import org.github.hrautoassignertaskhoursforecast.teamMembers.application.dto.TeamMemberSearchDTO
import org.github.hrautoassignertaskhoursforecast.teamMembers.infrastructure.jdbc.TeamMemberRepository
import org.github.hrautoassignertaskhoursforecast.teamMembers.domain.entity.TeamMember
import org.github.hrautoassignertaskhoursforecast.teamMembers.domain.entity.vo.PerformanceForTask
import org.slf4j.LoggerFactory
import org.springframework.data.jpa.domain.Specification

import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import kotlin.NoSuchElementException

@Service
@Transactional
class TeamMemberService(
    private val teamMemberRepository: TeamMemberRepository,
    private val teamMemberMapper: TeamMemberMapper
) {
    private val logger = LoggerFactory.getLogger(this::class.java)

    suspend fun createTeamMember(request: TeamMemberRequestDTO): TeamMemberResponseDTO = withContext(Dispatchers.IO) {
        val newMember = TeamMember(
            teamMemberName = request.teamMemberName,
            teamMemberRole = request.role ?: "Default Role",
            level = request.level ?: 1,
            isWorking = request.isWorking ?: true,
            performancesForTasks = PerformanceForTask.fromMap(request.performancesForTasks ?: emptyMap()),
            achievementsScore = request.achievementsScore ?: 0.0f
        )

        val savedMember = teamMemberRepository.save(newMember)
        teamMemberMapper.toResponseDto(savedMember)
    }

    suspend fun updateTeamMember(id: Long, request: TeamMemberRequestDTO): TeamMemberResponseDTO = withContext(Dispatchers.IO) {
        val existingMember = teamMemberRepository.findById(id).orElseThrow {
            NoSuchElementException("Team member with ID $id not found.")
        }

        val updatedMember = existingMember.copy(
            teamMemberName = request.teamMemberName,
            teamMemberRole = request.role ?: existingMember.teamMemberRole,
            level = request.level ?: existingMember.level,
            isWorking = request.isWorking ?: existingMember.isWorking,
            performancesForTasks = PerformanceForTask.fromMap(
                request.performancesForTasks ?: existingMember.performancesForTasks.getAllPerformancesForTasks()
            ),
            achievementsScore = request.achievementsScore ?: existingMember.achievementsScore
        )

        val savedMember = teamMemberRepository.save(updatedMember)
        teamMemberMapper.toResponseDto(savedMember)
    }

    suspend fun updateTeamMemberState(id: Long, newState: Boolean): TeamMemberResponseDTO {
        // 팀 멤버 조회 (없으면 예외 발생)
        val existingMember = teamMemberRepository.findById(id)
            .orElseThrow { ResourceNotFoundException("Team member with ID $id not found.") }


        // 기존 멤버의 `isWorking`(state) 값만 변경
        val updatedMember = existingMember.copy(isWorking = newState)

        // 변경된 멤버 저장
        val savedMember = teamMemberRepository.save(updatedMember)

        // 변경된 멤버 정보를 DTO로 변환하여 반환
        return teamMemberMapper.toResponseDto(savedMember)
    }

    /**
     * 팀원 삭제
     * @param id 삭제할 팀원의 ID
     * @return 삭제 성공 여부
     * @throws NoSuchElementException 해당 ID의 팀원이 존재하지 않을 경우
     */
    suspend fun deleteTeamMember(id: Long): Boolean = withContext(Dispatchers.IO) {
        val member = teamMemberRepository.findById(id).orElseThrow {
            NoSuchElementException("Team member with ID $id not found.")
        }

        logger.debug("Deleting team member - ID: ${member.id}, Name: ${member.teamMemberName}")
        teamMemberRepository.delete(member)

        logger.info("Successfully deleted team member with ID: $id")
        true
    }

    @Transactional(readOnly = true)
    suspend fun findAllTeamMembers(): List<TeamMemberResponseDTO> =
        withContext(Dispatchers.IO) {
        val members = teamMemberRepository.findAll()
        members.forEach { member ->
            logger.debug("DB Data - ID: ${member.id}")
            logger.debug("DB Data - Name: ${member.teamMemberName}")
            logger.debug("DB Data - Role: ${member.teamMemberRole}")
            logger.debug("DB Data - Performances: ${member.performancesForTasks}")
        }
        members.map { teamMemberMapper.toResponseDto(it) }
    }

    suspend fun addPerformanceForTask(id: Long, newPerformances: Map<String, Int>): TeamMemberResponseDTO =
        withContext(Dispatchers.IO) {
        val member = teamMemberRepository.findById(id).orElseThrow {
            NoSuchElementException("Team member with ID $id not found.")
        }

        member.performancesForTasks.updatePerformancesForTasks(newPerformances, true)
        val savedMember = teamMemberRepository.save(member)
        teamMemberMapper.toResponseDto(savedMember)
    }

    suspend fun updateScoresForTasks(id: Long, type: String, score: Int): TeamMemberResponseDTO =
        withContext(Dispatchers.IO) {
        val member = teamMemberRepository.findById(id).orElseThrow {
            NoSuchElementException("Team member with ID $id not found.")
        }

        member.performancesForTasks.setPerformanceForTask(type, score)
        val savedMember = teamMemberRepository.save(member)
        teamMemberMapper.toResponseDto(savedMember)
    }

    suspend fun updateNameForPerformance(id: Long, type: String, newTypeName: String): TeamMemberResponseDTO =
        withContext(Dispatchers.IO) {

        val member = teamMemberRepository.findById(id).orElseThrow {
            NoSuchElementException("Team member with ID $id not found.")
        }

        member.performancesForTasks.setPerformanceNameForTask(type, newTypeName)
        val savedMember = teamMemberRepository.save(member)
        teamMemberMapper.toResponseDto(savedMember)
    }

    suspend fun renewPerformancesForTasks(id: Long, newPerformances: Map<String, Int>): TeamMemberResponseDTO = withContext(Dispatchers.IO) {
        val member = teamMemberRepository.findById(id).orElseThrow {
            NoSuchElementException("Team member with ID $id not found.")
        }

        member.performancesForTasks.updatePerformancesForTasks(newPerformances, false)
        val savedMember = teamMemberRepository.save(member)
        teamMemberMapper.toResponseDto(savedMember)
    }

    /**
     * 이름으로 팀원 조회
     * - 이름을 기반으로 팀원들을 검색하고 DTO 리스트로 변환
     */
    @Transactional(readOnly = true)
    suspend fun findTeamMemberByName(name: String): TeamMemberResponseDTO =
        withContext(Dispatchers.IO) {

            val member = teamMemberRepository.findByTeamMemberNameContaining(name)
            teamMemberMapper.toResponseDto(member)
        }

    /**
     * ID로 팀원 조회
     * - 특정 ID를 가진 팀원을 데이터베이스에서 조회
     * - 존재하지 않으면 예외 발생
     */
    @Transactional(readOnly = true)
    suspend fun findTeamMemberById(id: Long): TeamMemberResponseDTO =
        withContext(Dispatchers.IO) {
        val member = teamMemberRepository.findById(id).orElseThrow {
            NoSuchElementException("Team member with ID $id not found.")
        }
        teamMemberMapper.toResponseDto(member)
    }

    suspend fun getScoreForTask(memberName: String, taskName: String): Double =
        withContext(Dispatchers.IO) {
            val member = teamMemberRepository.findByTeamMemberNameContaining(memberName)
            val score = member.performancesForTasks.getScoreByTask(taskName)
            score!!.toDouble() // Int를 Double로 변환
        }

    @Transactional(readOnly = true)
    suspend fun searchTeamMembers(criteria: TeamMemberSearchDTO): List<TeamMemberResponseDTO> {
        return withContext(Dispatchers.IO) {
            var spec: Specification<TeamMember> = Specification.where(null)

            // 각 파라미터에 대한 Specification 추가
            criteria.teamMemberName?.let {
                spec = spec.and(Specification { root, _, cb ->
                    cb.like(root.get<String>("teamMemberName"), "%$it%")
                })
            }

            criteria.teamMemberRole?.let {
                spec = spec.and(Specification { root, _, cb ->
                    cb.like(root.get<String>("teamMemberRole"), "%${it.lowercase()}%")
                })
            }

            criteria.level?.let {
                spec = spec.and(Specification { root, _, cb ->
                    cb.equal(root.get<Int>("level"), it)
                })
            }

            criteria.isWorking?.let {
                spec = spec.and(Specification { root, _, cb ->
                    cb.equal(root.get<Boolean>("isWorking"), it)
                })
            }

            criteria.achievementsScore?.let {
                spec = spec.and(Specification { root, _, cb ->
                    cb.equal(root.get<Float>("achievementsScore"), it)
                })
            }

            val members = teamMemberRepository.findAll(spec)
            members.map { teamMemberMapper.toResponseDto(it) }
        }
    }


}